http://crankstations.com/vagrant

    [pdurbin@tabby ~]$ /opt/vagrant/bin/vagrant box add base http://files.vagrantup.com/precise64.box
    [vagrant] Downloading with Vagrant::Downloaders::HTTP...
    [vagrant] Downloading box: http://files.vagrantup.com/precise64.box
    [vagrant] Extracting box...
    [vagrant] Verifying box...
    [vagrant] Cleaning up downloaded box...
    [pdurbin@tabby ~]$ 
    [pdurbin@tabby ~]$ /opt/vagrant/bin/vagrant init
    A `Vagrantfile` has been placed in this directory. You are now
    ready to `vagrant up` your first virtual environment! Please read
    the comments in the Vagrantfile as well as documentation on
    `vagrantup.com` for more information on using Vagrant.
    [pdurbin@tabby ~]$ 
    [pdurbin@tabby ~]$ cat Vagrantfile 
    # -*- mode: ruby -*-
    # vi: set ft=ruby :

    Vagrant::Config.run do |config|
      # All Vagrant configuration is done here. The most common configuration
      # options are documented and commented below. For a complete reference,
      # please see the online documentation at vagrantup.com.

      # Every Vagrant virtual environment requires a box to build off of.
      config.vm.box = "base"

      # The url from where the 'config.vm.box' box will be fetched if it
      # doesn't already exist on the user's system.
      # config.vm.box_url = "http://domain.com/path/to/above.box"

      # Boot with a GUI so you can see the screen. (Default is headless)
      # config.vm.boot_mode = :gui

      # Assign this VM to a host-only network IP, allowing you to access it
      # via the IP. Host-only networks can talk to the host machine as well as
      # any other machines on the same network, but cannot be accessed (through this
      # network interface) by any external networks.
      # config.vm.network :hostonly, "192.168.33.10"

      # Assign this VM to a bridged network, allowing you to connect directly to a
      # network using the host's network device. This makes the VM appear as another
      # physical device on your network.
      # config.vm.network :bridged

      # Forward a port from the guest to the host, which allows for outside
      # computers to access the VM, whereas host only networking does not.
      # config.vm.forward_port 80, 8080

      # Share an additional folder to the guest VM. The first argument is
      # an identifier, the second is the path on the guest to mount the
      # folder, and the third is the path on the host to the actual folder.
      # config.vm.share_folder "v-data", "/vagrant_data", "../data"

      # Enable provisioning with Puppet stand alone.  Puppet manifests
      # are contained in a directory path relative to this Vagrantfile.
      # You will need to create the manifests directory and a manifest in
      # the file base.pp in the manifests_path directory.
      #
      # An example Puppet manifest to provision the message of the day:
      #
      # # group { "puppet":
      # #   ensure => "present",
      # # }
      # #
      # # File { owner => 0, group => 0, mode => 0644 }
      # #
      # # file { '/etc/motd':
      # #   content => "Welcome to your Vagrant-built virtual machine!
      # #               Managed by Puppet.\n"
      # # }
      #
      # config.vm.provision :puppet do |puppet|
      #   puppet.manifests_path = "manifests"
      #   puppet.manifest_file  = "base.pp"
      # end

      # Enable provisioning with chef solo, specifying a cookbooks path, roles
      # path, and data_bags path (all relative to this Vagrantfile), and adding 
      # some recipes and/or roles.
      #
      # config.vm.provision :chef_solo do |chef|
      #   chef.cookbooks_path = "../my-recipes/cookbooks"
      #   chef.roles_path = "../my-recipes/roles"
      #   chef.data_bags_path = "../my-recipes/data_bags"
      #   chef.add_recipe "mysql"
      #   chef.add_role "web"
      #
      #   # You may also specify custom JSON attributes:
      #   chef.json = { :mysql_password => "foo" }
      # end

      # Enable provisioning with chef server, specifying the chef server URL,
      # and the path to the validation key (relative to this Vagrantfile).
      #
      # The Opscode Platform uses HTTPS. Substitute your organization for
      # ORGNAME in the URL and validation key.
      #
      # If you have your own Chef Server, use the appropriate URL, which may be
      # HTTP instead of HTTPS depending on your configuration. Also change the
      # validation key to validation.pem.
      #
      # config.vm.provision :chef_client do |chef|
      #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
      #   chef.validation_key_path = "ORGNAME-validator.pem"
      # end
      #
      # If you're using the Opscode platform, your validator client is
      # ORGNAME-validator, replacing ORGNAME with your organization name.
      #
      # IF you have your own Chef Server, the default validation client name is
      # chef-validator, unless you changed the configuration.
      #
      #   chef.validation_client_name = "ORGNAME-validator"
    end
    [pdurbin@tabby ~]$ 
    [pdurbin@tabby ~]$ /opt/vagrant/bin/vagrant up
    [default] Importing base box 'base'...
    [default] The guest additions on this VM do not match the install version of
    VirtualBox! This may cause things such as forwarded ports, shared
    folders, and more to not work properly. If any of those things fail on
    this machine, please update the guest additions and repackage the
    box.

    Guest Additions Version: 4.1.14
    VirtualBox Version: 4.1.16
    [default] Matching MAC address for NAT networking...
    [default] Clearing any previously set forwarded ports...
    [default] Forwarding ports...
    [default] -- 22 => 2222 (adapter 1)
    [default] Creating shared folders metadata...
    [default] Clearing any previously set network interfaces...
    [default] Booting VM...
    [default] Waiting for VM to boot. This can take a few minutes.
    [default] VM booted and ready for use!
    [default] Mounting shared folders...
    [default] -- v-root: /vagrant
    [pdurbin@tabby ~]$ 
    [pdurbin@tabby ~]$ /opt/vagrant/bin/vagrant ssh
    Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic x86_64)

     * Documentation:  https://help.ubuntu.com/
    Welcome to your Vagrant-built virtual machine.
    Last login: Mon May  7 19:16:13 2012 from 10.0.2.2
    vagrant@precise64:~$ 

http://blog.vandenbrand.org/2012/02/21/creating-a-centos-6-2-base-box-for-vagrant/

pdurbin gets religion about vagrant: http://irclog.perlgeek.de/crimsonfu/2012-10-29#i_6108381
